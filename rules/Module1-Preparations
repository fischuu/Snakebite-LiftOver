rule fasta_to_2bit:
    input:
        start_genome=config["start-genome"],
        end_genome=config["end-genome"]
    output:
        start_genome="{genome}.2bit".format(genome=config["start-genome"]),
        end_genome="{genome}.2bit".format(genome=config["end-genome"])
    log:
        stdout="%s/logs/fasta_to_2bit.stdout.log" % (config["project-folder"]),
        stderr="%s/logs/fasta_to_2bit.stderr.log" % (config["project-folder"])
    singularity:
        config["singularity"]["fatotwobit"]
    shell:
        """
        faToTwoBit {input.start_genome} {output.start_genome} > {log.stdout} 2> {log.stderr}
        faToTwoBit {input.end_genome} {output.end_genome} >> {log.stdout} 2>> {log.stderr}
        """    

rule run_blat_oldToNew:
    input:
    #    start_genome="{genome}.2bit".format(genome=config["start-genome"]),
    #    end_genome="{genome}.2bit".format(genome=config["end-genome"])
        start_genome=config["start-genome"],
        end_genome=config["end-genome"]
    output:
        "%s/CHAIN/chain_oldToNew.psl" % (config["project-folder"])
    log:
        stdout="%s/logs/run_blat_oldToNew.stdout.log" % (config["project-folder"]),
        stderr="%s/logs/run_blat_oldToNew.stderr.log" % (config["project-folder"])
    singularity:
        config["singularity"]["pblat"]
    threads: config["params"]["pblat"]["threads"]   
    shell:
        """
        pblat -threads={threads} {input.start_genome} {input.end_genome} {output} -tileSize=12 -minScore=1000 -minIdentity=98 > {log.stdout} 2> {log.stderr}
        """
        
rule run_blat_newToOld:
    input:
    #    start_genome="{genome}.2bit".format(genome=config["start-genome"]),
    #    end_genome="{genome}.2bit".format(genome=config["end-genome"])
        start_genome=config["end-genome"],
        end_genome=config["start-genome"]
    output:
        "%s/CHAIN/chain_newToOld.psl" % (config["project-folder"])
    log:
        stdout="%s/logs/run_blat_newToOld.stdout.log" % (config["project-folder"]),
        stderr="%s/logs/run_blat_newToOld.stderr.log" % (config["project-folder"])
    singularity:
        config["singularity"]["pblat"]
    threads: config["params"]["pblat"]["threads"]   
    shell:
        """
        pblat -threads={threads} {input.start_genome} {input.end_genome} {output} -tileSize=12 -minScore=1000 -minIdentity=98 > {log.stdout} 2> {log.stderr}
        """
        
rule psl_to_chain:
    input:
        "%s/CHAIN/chain.psl" % (config["project-folder"])
    output:
        "%s/CHAIN/temp.chain" % (config["project-folder"])
    singularity:
        config["singularity"]["pslToChain"]
    shell:
        """
        pslToChain {input} {output}
        #chainMergeSort temp.chain | chainNet stdin genome_old.sizes genome_new.sizes stdout /dev/null | netChainSubset stdin temp.chain {output}
        """
        
rule chain_merge:
    input:
        tmp_chain="%s/CHAIN/temp.chain" % (config["project-folder"]),
        start_genome=config["start-genome"],
        end_genome=config["end-genome"]
    output:
        start_genome_sizes="{genome}.sizes".format(genome=config["start-genome"]),
        end_genome_sizes="{genome}.sizes".format(genome=config["end-genome"]),
        chain="%s/CHAIN/over.chain" % (config["project-folder"]),
    singularity:
        config["singularity"]["pslToChain"]
    shell:
        """
        faSize -detailed {input.start_genome} > {output.start_genome_sizes}
        faSize -detailed {input.end_genome} > {output.end_genome_sizes}
        chainMergeSort {input.tmp_chain} | chainNet {input.tmp_chain} {output.start_genome_sizes} {output.end_genome_sizes} stdout /dev/null | netChainSubset {input.tmp_chain} {output.chain}
        """
